name: Build the resource pack

on:
  workflow_call:
    inputs:
      version_url:
        description: The download url for the Minecraft version json file to build the pack from
        required: true
        type: string
      version_name:
        description: The name of the Minecraft version to build the pack for
        required: true
        type: string
      is_full_release:
        description: Type of the release, true for a full release or false for a snapshot
        required: true
        type: boolean
    secrets:
      KESU_BOT_PAT:
        description: repository token to commit and push to this repo
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    name: 'Build ${{ inputs.version_name }}'
    outputs:
      hasChanges: ${{ steps.changes.outputs.hasChanges }}
    steps:
      - uses: actions/checkout@v4
        with:
          path: resource-pack
          token: ${{ secrets.KESU_BOT_PAT }}
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Download and build dependencies
        run: |
          go build -C resource-pack/langmerge/ -o ../.. .

          git clone https://github.com/schmanguage/schmanguage-cli
          go build -C schmanguage-cli -o .. .

      - name: Get the ${{ inputs.version_name }} client
        run: |
          wget -O version.json ${{ inputs.version_url }}
          wget -O client.jar $(jq --compact-output --join-output .downloads.client.url version.json)
      - name: translate en_us
        run: |
          unzip -p client.jar assets/minecraft/lang/en_us.json > en_us.json
          jq '.["language.code"] = (.["language.code"]|split("_")[0]+"_schm") | .["language.region"] = "Schmanguage"' en_us.json > en_schm.json
          ./schmanguage --type json en_schm.json
          ./langmerge en_us.json resource-pack/assets/schmanguage/lang/en_schm.json en_schm.json && rm en_schm.json
      - name: update pack format
        run: |
          unzip -p client.jar version.json > client_versions.json
          jq 'input.pack_version.resource as $format | .pack.pack_format = $format | .pack.supported_formats[1] = $format' resource-pack/pack.mcmeta client_versions.json > pack.mcmeta && mv pack.mcmeta resource-pack/pack.mcmeta
      - name: check for changes
        id: changes
        run: |
          cd resource-pack
          if [ -z "$(git status --porcelain)" ]; then
            echo "no changes"
            echo "hasChanges=false" >> $GITHUB_OUTPUT
          else
            echo changes
            echo "hasChanges=true" >> $GITHUB_OUTPUT
            git diff
          fi
      - name: commit pack
        if: ${{ steps.changes.outputs.hasChanges == 'true' }}
        run: |
          cd resource-pack
          git config user.name "Kesuaheli Bot"
          git config user.email "150326642+kesuaheli-bot@users.noreply.github.com"
          git commit -am "generated ${{ inputs.version_name }}"
          git push

  upload:
    needs: build
    if: ${{ needs.build.outputs.hasChanges == 'true' }}
    runs-on: ubuntu-latest
    name: 'Upload ${{ inputs.version_name }}'
    steps:
      - uses: actions/checkout@v4

      - name: Zipping the pack
        run: >
          zip -r pack.zip
          README.md
          LICENSE
          assets
          pack.mcmeta
          pack.png

      - name: Save pack artifact
        uses: actions/upload-artifact@v3
        with:
          name: §5Schmanguage_${{ inputs.version_name }}${{ !inputs.is_full_release && '_SNAPSHOT'}}§r§m
          path: pack.zip

      - name: Create release
        id: create_release
        uses: avakar/tag-and-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.KESU_BOT_PAT}}
        with:
          tag_name: ${{ inputs.version_name }}
          release_name: ${{ inputs.is_full_release && 'Release' || 'Snapshot'}} ${{ inputs.version_name }}
          prerelease: ${{ !inputs.is_full_release }}

      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.KESU_BOT_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pack.zip
          asset_name: Schmanguage.zip
          asset_content_type: application/zip
